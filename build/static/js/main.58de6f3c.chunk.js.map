{"version":3,"sources":["common/Buttons.jsx","to-do/ListItem.jsx","to-do/ToDoList.jsx","app/App.js","serviceWorker.js","index.js","testModule.js"],"names":["Button1","props","href","url","style","color","name","Button2","this","React","Component","ListItem","state","value","item","text","changeStatus","removeItem","onItemChange","onClick","id","textDecoration","isDone","defaultValue","onBlur","e","target","Input","handleInputChange","setState","inputValue","list","axois","put","then","response","console","log","data","map","addItem","Axios","post","delete","type","placeholder","onChange","key","get","catch","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58de6f3c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Button1 = function(props) {\r\n  return (\r\n    <a href={props.url} style={{ color: props.color }}>\r\n      {props.name}\r\n    </a>\r\n  );\r\n};\r\n\r\nexport class Button2 extends React.Component {\r\n  render() {\r\n    return (\r\n      <a href={this.props.url} style={{ color: this.props.color }}>\r\n        {this.props.name}\r\n      </a>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ListItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: props.item.text\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { item, changeStatus, removeItem, onItemChange } = this.props;\r\n    return (\r\n      <div>\r\n        <li\r\n          onClick={() => changeStatus(item.id)}\r\n          style={{ textDecoration: item.isDone && \"line-through\" }}\r\n        >\r\n          <input\r\n            defaultValue={item.text}\r\n            onBlur={e => onItemChange(item.id, e.target.value)}\r\n          />\r\n        </li>\r\n        <button onClick={() => removeItem(item.id)}>Remove</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nListItem.propTypes = {\r\n  item: PropTypes.object.isRequired,\r\n  onItemChange: PropTypes.func.isRequired,\r\n  changeStatus: PropTypes.func.isRequired,\r\n  removeItem: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ListItem;\r\n","import React from \"react\";\r\nimport axois from \"axios\";\r\nimport Axios from \"axios\";\r\nimport ListItem from \"./ListItem\";\r\n\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: \"\",\r\n      list: [\r\n        /*{ text: \"one\", isDone: false },\r\n        { text: \"two\", isDone: false },\r\n        { text: \"three\", isDone: false }*/\r\n      ]\r\n    };\r\n  }\r\n\r\n  handleInputChange = e => {\r\n    this.setState({ inputValue: e.target.value });\r\n  };\r\n\r\n  changeStatus = id => {\r\n    const { list } = this.state;\r\n    axois\r\n      .put(`http://159.69.85.4:7777/api/alexey/tasks/${id}`)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          list: list.map(item => {\r\n            return {\r\n              ...item,\r\n              isDone: id === item.id ? !item.isDone : item.isDone\r\n            };\r\n          })\r\n        });\r\n      });\r\n\r\n    /* const { list } = this.state;\r\n    this.setState({\r\n      list: list.map((item, i) => {\r\n        return { ...item, isDone: index === i ? !item.isDone : item.isDone };\r\n      })\r\n    });*/\r\n  };\r\n\r\n  addItem = () => {\r\n    const { inputValue, list } = this.state;\r\n    Axios.post(\"http://159.69.85.4:7777/api/alexey/tasks\", {\r\n      text: inputValue,\r\n      isDone: false\r\n    }).then(response => {\r\n      console.log(response);\r\n      this.setState({ list: [...list, response.data] });\r\n    });\r\n\r\n    /*\r\n    const { inputValue, list } = this.state;\r\n    const item = { text: inputValue, isDone: false };\r\n    this.setState({ list: [...list, item] });*/\r\n  };\r\n\r\n  onItemChange = (id, value) => {\r\n    const { list } = this.state;\r\n    this.setState({\r\n      list: list.map(item => {\r\n        return { ...item, text: item.id === id ? value : item.text };\r\n      })\r\n    });\r\n  };\r\n\r\n  removeItem = id => {\r\n    axois\r\n      .delete(`http://159.69.85.4:7777/api/alexey/tasks/${id}`)\r\n      .then(response => {});\r\n  };\r\n\r\n  render() {\r\n    const { inputValue, list } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <p>{inputValue}</p>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Please enter value\"\r\n          value={inputValue}\r\n          onChange={this.handleInputChange}\r\n        />\r\n        <button onClick={this.addItem}>Add</button>\r\n        <ul>\r\n          {\" \"}\r\n          {list.map(item => {\r\n            return (\r\n              <ListItem\r\n                key={item.id}\r\n                item={item}\r\n                changeStatus={this.changeStatus}\r\n                removeItem={this.removeItem}\r\n                onItemChange={this.onItemChange}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    axois\r\n      .get(\"http://159.69.85.4:7777/api/alexey/tasks\")\r\n      .then(response => {\r\n        this.setState({ list: response.data });\r\n      })\r\n      .catch(e => console.log(e));\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Button1, Button2 } from \"../common/Buttons\";\nimport ToDoList from \"../to-do/ToDoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Button1 url=\"https://www.google.com\" color=\"red\" name=\"Google\" />\n        <Button2 url=\"https://www.facebook.com\" color=\"green\" name=\"Facebook\" />\n        <ToDoList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { year } from \"./testModule\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconsole.log(year);\n","export const year = 2019;\r\n\r\nexport default year;\r\n\r\nexport { year as someYear };\r\n"],"sourceRoot":""}